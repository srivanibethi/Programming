
https://leetcode.com/problems/design-hit-counter/description/

Since this is a design question, we need to ask interviewer how this class is going to be used?
A working code is not the answer to this question, but how you adjust your program to meet different use cases.

Consider: There are 1000 frequent hit() followed by 1 getHits(). If we only do removal in getHits() function, it will be very time consuming. For me, I prefer to do removal in both hit() and getHits(), so that the program avoids system lag in this case.
This is important when you design a time-critical system.

import collections
class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.deque = collections.deque(maxlen=300)
        self.count = 0
        
        

    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: void
        """
        
        if len(self.deque) == 300:
            t, count = self.deque.popleft()
            self.count -=count
        if self.deque and self.deque[-1][0] == timestamp:
            self.deque[-1][1] +=1
            self.count +=1
        else:
            self.deque.append([timestamp, 1])
            self.count +=1
        

    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        while self.deque and self.deque[0][0] <= timestamp-300:
            t, c = self.deque.popleft()
            self.count -= c
        return self.count
        


# Your HitCounter object will be instantiated and called as such:
# obj = HitCounter()
# obj.hit(timestamp)
# param_2 = obj.getHits(timestamp)

