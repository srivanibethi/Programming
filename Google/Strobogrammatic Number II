https://leetcode.com/problems/strobogrammatic-number-ii/#/description

class Solution(object):
    def findStrobogrammatic(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        evenmid = ["00", "11", "88", "69", "96"]
        oddmid = ["0", "1", "8"]
        if n <= 0:
            return
        elif n == 1:
            return oddmid
        elif n == 2:
            return evenmid[1:]
        elif n%2 == 0:
            r, mid = self.findStrobogrammatic(n-2), evenmid
        else:
            r, mid = self.findStrobogrammatic(n-1), oddmid
        premid = (n-1)/2
        return [p[:premid] + m + p[premid:] for m in mid for p in r]
