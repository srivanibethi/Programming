>>> from itertools import cycle
>>> colors = cycle(['red', 'white', 'blue'])

>>> next(colors)
'red'
>>> next(colors)
'white'
>>> next(colors)
'blue'
>>> next(colors)
'red'


Generators are an incredible powerful programming construct. They allow you to write streaming code with fewer 
intermediate variables and data structures. Besides that, they are more memory and CPU efficient. 
Finally, they tend to require fewer lines of code, too.

def something():
    result = []
    for ... in ...:
        result.append(x)
    return result
And replace it by:

def iter_something():
    for ... in ...:
        yield x
        
def squares(start, stop):
    for i in range(start, stop):
        yield i * i

generator = squares(a, b)
or the equivalent generator expression (genexp)

generator = (i*i for i in range(a, b))
TIPS:
==================================================================================
list comprehensions are better when you want to iterate over something multiple times). 
However, it's also worth noting that you should use a list if you want to use any of the list methods. 
For example, the following code won't work:

def gen():
    return (something for something in get_some_stuff())

print gen()[:2]     # generators don't support indexing or slicing
print [5,6] + gen() # generators can't be added to lists
Basically, use a generator expression if all you're doing is iterating once.
